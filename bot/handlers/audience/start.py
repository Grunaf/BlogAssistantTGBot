from datetime import datetime, timedelta
from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from sqlalchemy import func, cast, String
from sqlalchemy.orm import Session
from bot.database import SessionLocal
from bot.models import UserRole, Document, Test
from bot.bot_instance import blogger_bot
from bot.services.user_services import UserService

async def handle_audience_start(message: types.Message):
    session = SessionLocal()

    user_service = UserService(session)
    user_service.add_user(
        telegram_id=message.from_user.id,
        chat_id=message.chat.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        role=UserRole.Audience
    )
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –Ω–∞—à–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏.")

    # # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # documents = session.query(Document).all()

    # if documents:
    #     # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–µ–∫-–ª–∏—Å—Ç–∞–º–∏
    #     keyboard = InlineKeyboardMarkup(row_width=1)
    #     for document in documents:
    #         keyboard.add(
    #             InlineKeyboardButton(document.title, callback_data=f"checklist_{document.id}")
    #         )

    #     # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç
    #     await bot.send_message(
    #         message.from_user.id,
    #         "üìã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —á–µ–∫-–ª–∏—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
    #         reply_markup=keyboard,
    #     )
    # else:
    #     # –ï—Å–ª–∏ —á–µ–∫-–ª–∏—Å—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–µ—Å—Ç
    #     keyboard = InlineKeyboardMarkup(row_width=1)

    #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    #     popular_test = get_popular_test_id(session)

    #     if popular_test:
    #         # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–µ—Å—Ç
    #         keyboard.add(
    #             InlineKeyboardButton(f"–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç: {popular_test.title}", callback_data=f"test_{popular_test.id}")
    #         )
    #     else:
    #         test = session.query(Test).order_by(func.random()).first()  # –°–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Å—Ç
    #         if test:
    #             # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±—â–∏–π —Ç–µ—Å—Ç
    #             keyboard.add(
    #                 InlineKeyboardButton(f"–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç: {test.title}", callback_data=f"test_{test.id}")
    #             )

    #     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –±–æ—Ç–∞–º–∏
    #     keyboard.add(
    #         InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –±–æ—Ç–∞—Ö", callback_data="learn_bots")
    #     )

    #     await bot.send_message(
    #         message.from_user.id,
    #         "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á–µ–∫-–ª–∏—Å—Ç—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ:",
    #         reply_markup=keyboard,
    #     )
    # session.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∞–º–æ–≥–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞

# def get_popular_test_id(session: Session, time_frame: timedelta = timedelta(days=30), min_data_count=10):
#     # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
#     now = datetime.utcnow()

#     # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è "CompletedTest" –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
#     query = session.query(
#         cast(ActivityLog.details["test_id"], String).label("test_id"),
#         func.count(ActivityLog.id).label("count")
#     ).filter(
#         ActivityLog.action == "Action.CompletedTest"
#     )

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30 –¥–Ω–µ–π)
#     if time_frame:
#         start_date = now - time_frame
#         query = query.filter(ActivityLog.timestamp >= start_date)

#     # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
#     total_records = query.count()

#     # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ —á–µ–º min_data_count, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
#     if total_records < min_data_count:
#         return None
    
#     # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ test_id –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
#     query = query.group_by("test_id").order_by(func.count(ActivityLog.id).desc())

#     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π test_id
#     result = query.first()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º first(), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–µ—Å—Ç
#     if result:
#         return int(result.test_id)
#     return None

#     # # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#     # keyboard = InlineKeyboardMarkup(row_width=1)
#     # keyboard.add(
#     #     InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="start_test"),
#     #     InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ–∫-–ª–∏—Å—Ç—ã", callback_data="view_checklists"),
#     #     InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –±–æ—Ç–∞—Ö", callback_data="learn_bots")
#     # )

#     # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#     # await message.answer(
#     #     f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–º–æ—â–Ω–∏–∫–∞ –±–æ—Ç–æ–≤! üöÄ\n\n"
#     #     "–ó–¥–µ—Å—å –≤—ã —É–∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ –∫–∞—Å—Ç–æ–º–Ω—ã–π –±–æ—Ç –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã, "
#     #     "–ø–æ–≤—ã—Å–∏—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –∏ –ø–æ–º–æ—á—å –≤–∞–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ.\n\n"
#     #     "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –î–∞–≤–∞–π—Ç–µ —Å –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≤–∞—à—É —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é!",
#     #     reply_markup=keyboard
#     # )

#     # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏
